package main

import (
	"fmt"
	"math/big"
)

/*
Escribe un programa que se encargue de comprobar si un n√∫mero es o no primo.
Hecho esto, imprime los n√∫meros primos entre 1 y 100.
*/

func primo() {

	for numero := 1; numero <= 100; numero++ {
		if esPrimo(numero) {
			fmt.Println(numero)
		}
	}

	for numero := 1; numero <= 100; numero++ {
		if esPrimo2(numero) {
			fmt.Println(numero)
		}
	}

	primos := cribaEratostenes(100)
    for _, primo := range primos {
        fmt.Println(primo)
    }
}


// Opci√≥n 1

func esPrimo(numero int) bool {

	if numero <= 1 {
		return false
	}
	if numero <= 3 {
		return true
	}
	if numero%2 == 0 || numero%3 == 0 {
		return false
	}

	// Inicializa i con el valor 5. Aqu√≠ i es el primer n√∫mero impar mayor que 3 que necesitamos verificar.

	i := 5

	// Este bucle contin√∫a mientras i * i sea menor o igual que numero.

	for i*i <= numero {

		// Esta verificaci√≥n funciona porque todos los n√∫meros primos mayores que 3 pueden ser expresados como 6ùëò¬±1 para alg√∫n entero k. Esto excluye los m√∫ltiplos de 2 y 3:

		if numero%i == 0 || numero%(i+2) == 0 {
			return false
		}

		// Esto significa que despu√©s de verificar i y i + 2 (por ejemplo, 5 y 7), se pasa a los pr√≥ximos candidatos, que son i + 6 y (i + 6) + 2 (por ejemplo, 11 y 13).

		i += 6
	}
	return true
}

// Opci√≥n 2

func esPrimo2(numero int) bool {

	// Convertir el n√∫mero a tipo big.Int

	bigNumero := big.NewInt(int64(numero))

	// Verificar si el n√∫mero es probablemente primo

	return bigNumero.ProbablyPrime(0) // 0 iterations implies deterministic check for small numbers
}

// Opci√≥n  3

func cribaEratostenes(limite int) []int {

	// Se crea un slice de booleanos llamado primos de longitud limite+1.
	// los elementos del slice se inicializan como true para marcarlos inicialmente como primos.
	// Los √≠ndices 0 y 1 se establecen como false ya que 0 y 1 no son n√∫meros primos.

	primos := make([]bool, limite+1)

	for i := range primos {
			primos[i] = true
	}
	primos[0] = false
	primos[1] = false

	// Para cada n√∫mero i desde 2 hasta la ra√≠z cuadrada de limite
	// Entonces, para cada m√∫ltiplo de i desde i*i hasta limite, se marca ese m√∫ltiplo como false en el slice primos, ya que los m√∫ltiplos de i no pueden ser primos.

	for i := 2; i*i <= limite; i++ {
			if primos[i] {
					for j := i * i; j <= limite; j += i {
							primos[j] = false
					}
			}
	}

	// Despu√©s de que se han marcado todos los m√∫ltiplos de los n√∫meros primos como false, los n√∫meros que quedan marcados como true en el slice primos son los n√∫meros primos dentro del rango.
	// Se recorre el slice primos nuevamente y se agregan los √≠ndices que est√°n marcados como true al slice resultado.

	var resultado []int
	for i := 2; i <= limite; i++ {
			if primos[i] {
					resultado = append(resultado, i)
			}
	}
	return resultado
}